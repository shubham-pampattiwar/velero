// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	v1 "github.com/vmware-tanzu/velero/pkg/generated/clientset/versioned/typed/velero/v1"
)

// VeleroV1Interface is an autogenerated mock type for the VeleroV1Interface type
type VeleroV1Interface struct {
	mock.Mock
}

// BackupRepositories provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) BackupRepositories(namespace string) v1.BackupRepositoryInterface {
	ret := _m.Called(namespace)

	var r0 v1.BackupRepositoryInterface
	if rf, ok := ret.Get(0).(func(string) v1.BackupRepositoryInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.BackupRepositoryInterface)
		}
	}

	return r0
}

// BackupStorageLocations provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) BackupStorageLocations(namespace string) v1.BackupStorageLocationInterface {
	ret := _m.Called(namespace)

	var r0 v1.BackupStorageLocationInterface
	if rf, ok := ret.Get(0).(func(string) v1.BackupStorageLocationInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.BackupStorageLocationInterface)
		}
	}

	return r0
}

// Backups provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) Backups(namespace string) v1.BackupInterface {
	ret := _m.Called(namespace)

	var r0 v1.BackupInterface
	if rf, ok := ret.Get(0).(func(string) v1.BackupInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.BackupInterface)
		}
	}

	return r0
}

// DeleteBackupRequests provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) DeleteBackupRequests(namespace string) v1.DeleteBackupRequestInterface {
	ret := _m.Called(namespace)

	var r0 v1.DeleteBackupRequestInterface
	if rf, ok := ret.Get(0).(func(string) v1.DeleteBackupRequestInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.DeleteBackupRequestInterface)
		}
	}

	return r0
}

// DownloadRequests provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) DownloadRequests(namespace string) v1.DownloadRequestInterface {
	ret := _m.Called(namespace)

	var r0 v1.DownloadRequestInterface
	if rf, ok := ret.Get(0).(func(string) v1.DownloadRequestInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.DownloadRequestInterface)
		}
	}

	return r0
}

// PodVolumeBackups provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) PodVolumeBackups(namespace string) v1.PodVolumeBackupInterface {
	ret := _m.Called(namespace)

	var r0 v1.PodVolumeBackupInterface
	if rf, ok := ret.Get(0).(func(string) v1.PodVolumeBackupInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.PodVolumeBackupInterface)
		}
	}

	return r0
}

// PodVolumeRestores provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) PodVolumeRestores(namespace string) v1.PodVolumeRestoreInterface {
	ret := _m.Called(namespace)

	var r0 v1.PodVolumeRestoreInterface
	if rf, ok := ret.Get(0).(func(string) v1.PodVolumeRestoreInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.PodVolumeRestoreInterface)
		}
	}

	return r0
}

// RESTClient provides a mock function with given fields:
func (_m *VeleroV1Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// Restores provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) Restores(namespace string) v1.RestoreInterface {
	ret := _m.Called(namespace)

	var r0 v1.RestoreInterface
	if rf, ok := ret.Get(0).(func(string) v1.RestoreInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.RestoreInterface)
		}
	}

	return r0
}

// Schedules provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) Schedules(namespace string) v1.ScheduleInterface {
	ret := _m.Called(namespace)

	var r0 v1.ScheduleInterface
	if rf, ok := ret.Get(0).(func(string) v1.ScheduleInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ScheduleInterface)
		}
	}

	return r0
}

// ServerStatusRequests provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) ServerStatusRequests(namespace string) v1.ServerStatusRequestInterface {
	ret := _m.Called(namespace)

	var r0 v1.ServerStatusRequestInterface
	if rf, ok := ret.Get(0).(func(string) v1.ServerStatusRequestInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ServerStatusRequestInterface)
		}
	}

	return r0
}

// VolumeSnapshotLocations provides a mock function with given fields: namespace
func (_m *VeleroV1Interface) VolumeSnapshotLocations(namespace string) v1.VolumeSnapshotLocationInterface {
	ret := _m.Called(namespace)

	var r0 v1.VolumeSnapshotLocationInterface
	if rf, ok := ret.Get(0).(func(string) v1.VolumeSnapshotLocationInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.VolumeSnapshotLocationInterface)
		}
	}

	return r0
}

// NewVeleroV1Interface creates a new instance of VeleroV1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVeleroV1Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *VeleroV1Interface {
	mock := &VeleroV1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
