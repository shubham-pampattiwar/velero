// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	discovery "k8s.io/client-go/discovery"

	v1 "github.com/vmware-tanzu/velero/pkg/generated/clientset/versioned/typed/velero/v1"

	v2alpha1 "github.com/vmware-tanzu/velero/pkg/generated/clientset/versioned/typed/velero/v2alpha1"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Discovery provides a mock function with given fields:
func (_m *Interface) Discovery() discovery.DiscoveryInterface {
	ret := _m.Called()

	var r0 discovery.DiscoveryInterface
	if rf, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}

	return r0
}

// VeleroV1 provides a mock function with given fields:
func (_m *Interface) VeleroV1() v1.VeleroV1Interface {
	ret := _m.Called()

	var r0 v1.VeleroV1Interface
	if rf, ok := ret.Get(0).(func() v1.VeleroV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.VeleroV1Interface)
		}
	}

	return r0
}

// VeleroV2alpha1 provides a mock function with given fields:
func (_m *Interface) VeleroV2alpha1() v2alpha1.VeleroV2alpha1Interface {
	ret := _m.Called()

	var r0 v2alpha1.VeleroV2alpha1Interface
	if rf, ok := ret.Get(0).(func() v2alpha1.VeleroV2alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2alpha1.VeleroV2alpha1Interface)
		}
	}

	return r0
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
